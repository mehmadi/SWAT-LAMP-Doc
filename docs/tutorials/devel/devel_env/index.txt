.. _install_devmode:

Install SWAT-LAMP for Development
===============================

In order to install SWAT-LAMP 2.4 in development mode on Ubuntu 14.04 the following steps are required:

For Windows: (:ref:`win_devinstall`)

For Centos 7: (:ref:`devmode_install_centos`)

Summary of the installation steps

    #. Retrieve latest apt-get list
    #. Install build tools and libraries
    #. Install dependencies (Python, Postgresql and Java) and supporting tools
    #. Add Nodejs PPA and other tools required for static development
    #. Set up a virtual environment (virtualenv)
    #. Clone SWAT-LAMP from github and install it in the virtual environment
    #. Run paver to get install geoserver and start the development servers
    #. Compile and Start the server
    #. Start SWAT-LAMP instance
    #. To stop the server
    #. Next create a superuser for your django SWAT-LAMP

.. note:: The following steps have to be executed in your terminal. The steps have to be done as a **root user**, therefore donÂ´t forget to type sudo in front!

.. warning:: Don't forget to stop the **SWAT-LAMP Production** services if enabled

    .. code-block:: console

        service apahe2 stop
        service tomcat7 stop

#. If possible log as **root** user, open a terminal and ``cd /home/SWAT-LAMP/dev``

#. Retrieve latest apt-get list

   .. code-block:: console

        $ sudo apt-get update

#. Install build tools and libraries

   .. code-block:: console

        $ sudo apt-get install -y build-essential libxml2-dev libxslt1-dev libpq-dev zlib1g-dev

#. Install dependencies

   *Python native dependencies*

   .. code-block:: console

        $ sudo apt-get install -y python-dev python-imaging python-lxml python-pyproj python-shapely python-nose python-httplib2 python-pip python-software-properties

   *Install Python Virtual Environment*

   .. code-block:: console

        $ sudo pip install virtualenvwrapper

   *PostgreSQL & PostGIS*

     .. note:: The following steps must be executed **only** if you don't have PostgreSQL and PostGIS already installed on your system (see :ref:`install_SWAT-LAMP_application`)

         .. code-block:: console

      $ sudo apt-get install -y postgresql-9.3-postgis-2.1 postgresql-9.3-postgis-scripts

         Change postgres UNIX password


    .. code-block:: console

        $ sudo passwd -u postgres # change password expiry infromation

        $ sudo passwd postgres # change unix password for postgres

     Create SWAT-LAMP role and database

         .. code-block:: console

            $ su postgres
            $ createdb SWAT-LAMP_dev
            $ createdb SWAT-LAMP_dev-imports
            $ psql
              postgres=#
              postgres=# \password postgres
              postgres=# CREATE USER SWAT-LAMP_dev WITH PASSWORD 'SWAT-LAMP_dev'; # should be same as password in setting.py
              postgres=# GRANT ALL PRIVILEGES ON DATABASE "SWAT-LAMP_dev" to SWAT-LAMP_dev;
              postgres=# GRANT ALL PRIVILEGES ON DATABASE "SWAT-LAMP_dev-imports" to SWAT-LAMP_dev;
              postgres=# \q

            $ psql -d SWAT-LAMP_dev-imports -c 'CREATE EXTENSION postgis;'
            $ psql -d SWAT-LAMP_dev-imports -c 'GRANT ALL ON geometry_columns TO PUBLIC;'
            $ psql -d SWAT-LAMP_dev-imports -c 'GRANT ALL ON spatial_ref_sys TO PUBLIC;'

            $ exit

    Edit PostgreSQL configuration file ::

        sudo gedit /etc/postgresql/9.3/main/pg_hba.conf

    Scroll to the bottom of the file and edit this line ::

        # "local" is for Unix domain socket connections only
        local   all             all                            peer

    As follows ::

        # "local" is for Unix domain socket connections only
        local   all             all                                trust

    Restart PostgreSQL to make the changes effective ::

        sudo service postgresql restart

    *Java dependencies*

    .. note:: The following steps must be executed **only** if you don't have a Java JDK or JRE already installed on your system (see :ref:`install_SWAT-LAMP_application`)

        .. code-block:: console

    $ sudo apt-get install -y --force-yes openjdk-7-jdk --no-install-recommends

   *Supporting tools*

    .. code-block:: console

    $ sudo apt-get install -y git gettext libjpeg62 libjpeg62-dev

#. Set up a virtual environment

   This is the local environment where SWAT-LAMP will later be running.

   Add the virtualenvwrapper to your new environement.


      .. code-block:: console

        $ cd /home/SWAT-LAMP/dev

        $ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
        $ export WORKON_HOME=/home/SWAT-LAMP/dev/.venvs
        $ source /usr/local/bin/virtualenvwrapper.sh
        $ export PIP_DOWNLOAD_CACHE=$HOME/.pip-downloads

   On Ubuntu, you can add the above settings to your .bashrc file and reload the settings running

       .. code-block:: console

            $ echo export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python >> ~/.bashrc
            $ echo export WORKON_HOME=/home/SWAT-LAMP/dev/.venvs >> ~/.bashrc
            $ echo source /usr/local/bin/virtualenvwrapper.sh >> ~/.bashrc
            $ echo export PIP_DOWNLOAD_CACHE=$HOME/.pip-downloads >> ~/.bashrc

            $ source ~/.bashrc

   Set up the local virtual environment for SWAT-LAMP

      .. code-block:: console

       $ mkvirtualenv SWAT-LAMP
       $ workon SWAT-LAMP # or $ source /home/SWAT-LAMP/dev/.venvs/SWAT-LAMP/bin/activate

      This creates a new directory where you want your project to be and creates a new virtualenvironment


#. Get the SWAT-LAMP source code

   To download the latest SWAT-LAMP version from github, the command *clone* is used

   .. note::
    If you are following the SWAT-LAMP training, skip the following command.
    You can find the cloned repository in /home/SWAT-LAMP/dev

       .. code-block:: console

        $ git clone https://github.com/SWAT-LAMP/SWAT-LAMP.git

#. Add Nodejs PPA and other tools required for static development

   This is required for static development

    .. note::
     If you are following SWAT-LAMP's training, nodejs is already installed in the
     Virtual Machine skip the first three command and jump to `cd SWAT-LAMP/SWAT-LAMP/static`

        .. code-block:: console

            $ sudo add-apt-repository -y ppa:chris-lea/node.js
            $ sudo apt-get update
            $ sudo apt-get install -y nodejs
            $ cd SWAT-LAMP/SWAT-LAMP/static
            $ npm install --save-dev

            # If the last command does not work, you can run it manually like this:

            $ npm install bower --save-dev
            $ npm install grunt-cli --save-dev
            $ npm install grunt-contrib-jshint --save-dev
            $ npm install grunt-contrib-less --save-dev
            $ npm install grunt-contrib-concat --save-dev
            $ npm install grunt-contrib-copy --save-dev
            $ npm install grunt-text-replace --save-dev
            $ npm install grunt-contrib-uglify --save-dev
            $ npm install grunt-contrib-cssmin --save-dev
            $ npm install grunt-contrib-watch --save-dev

   .. note:: Every time you want to update the static files after making changes to the sources, go to SWAT-LAMP/static and run 'grunt production'.

#. Install SWAT-LAMP in the new active local virtualenv

    .. code-block:: console

        $ cd /home/SWAT-LAMP/dev
        $ pip install pip --upgrade
        $ pip install -e SWAT-LAMP --use-mirrors

        $ cd SWAT-LAMP

   If the install fails because of an error related to pyproj not being verified (happens on pip 1.5), use the following:

   .. code-block:: console

        $ pip install -e SWAT-LAMP --use-mirrors --allow-external pyproj --allow-unverified pyproj

#. Create ``local_settings.py``

   Add the ``local_settings.py`` to your SWAT-LAMP instllation

   .. code-block:: console

        $ cd /home/SWAT-LAMP/dev/SWAT-LAMP
        $ cp SWAT-LAMP/local_settings.py.sample SWAT-LAMP/local_settings.py
        $ gedit SWAT-LAMP/local_settings.py

   Add the following lines to the ``local_settings.py``

   .. code-block:: python

        ...

        SITEURL = "http://localhost:8000/"

        DATABASES = {
            'default': {
                 'ENGINE': 'django.db.backends.postgresql_psycopg2',
                 'NAME': 'SWAT-LAMP_dev',
                 'USER': 'SWAT-LAMP_dev',
                 'PASSWORD': 'SWAT-LAMP_dev',
             },
            # vector datastore for uploads
            'datastore' : {
                'ENGINE': 'django.contrib.gis.db.backends.postgis',
                #'ENGINE': '', # Empty ENGINE name disables
                'NAME': 'SWAT-LAMP_dev-imports',
                'USER' : 'SWAT-LAMP_dev',
                'PASSWORD' : 'SWAT-LAMP_dev',
                'HOST' : 'localhost',
                'PORT' : '5432',
            }
        }

        # OGC (WMS/WFS/WCS) Server Settings
        OGC_SERVER = {
            'default' : {
                'BACKEND' : 'SWAT-LAMP.geoserver',
                'LOCATION' : 'http://localhost:8080/geoserver/',
                'PUBLIC_LOCATION' : 'http://localhost:8080/geoserver/',
                'USER' : 'admin',
                'PASSWORD' : 'geoserver',
                'MAPFISH_PRINT_ENABLED' : True,
                'PRINT_NG_ENABLED' : True,
                'SWAT-LAMP_SECURITY_ENABLED' : True,
                'GEOGIG_ENABLED' : False,
                'WMST_ENABLED' : False,
                'BACKEND_WRITE_ENABLED': True,
                'WPS_ENABLED' : False,
                'LOG_FILE': '%s/geoserver/data/logs/geoserver.log' % os.path.abspath(os.path.join(PROJECT_ROOT, os.pardir)),
                # Set to name of database in DATABASES dictionary to enable
                'DATASTORE': 'datastore',
            }
        }

        CATALOGUE = {
            'default': {
                # The underlying CSW implementation
                # default is pycsw in local mode (tied directly to SWAT-LAMP Django DB)
                'ENGINE': 'SWAT-LAMP.catalogue.backends.pycsw_local',
                # pycsw in non-local mode
                # 'ENGINE': 'SWAT-LAMP.catalogue.backends.pycsw_http',
                # GeoNetwork opensource
                # 'ENGINE': 'SWAT-LAMP.catalogue.backends.geonetwork',
                # deegree and others
                # 'ENGINE': 'SWAT-LAMP.catalogue.backends.generic',

                # The FULLY QUALIFIED base url to the CSW instance for this SWAT-LAMP
                'URL': '%scatalogue/csw' % SITEURL,
                # 'URL': 'http://localhost:8080/geonetwork/srv/en/csw',
                # 'URL': 'http://localhost:8080/deegree-csw-demo-3.0.4/services',

                # login credentials (for GeoNetwork)
                'USER': 'admin',
                'PASSWORD': 'admin',
            }
        }

        ...

#. Compile and Start the server for the first time

   Align the DataBase structure

   .. code-block:: console

    $ cd /home/SWAT-LAMP/dev/SWAT-LAMP
    $ python manage.py syncdb --noinput

   .. warning:: If the start fails because of an import error related to osgeo, then please consult the :ref:`install_gdal_devmode`.

   The last step is to compile GeoServer and setup

   .. code-block:: console

    $ paver setup


#. Now we can start our SWAT-LAMP instance

    .. warning:: Don't forget to stop the **SWAT-LAMP Production** services if enabled

        .. code-block:: console

            service apahe2 stop
            service tomcat7 stop

   .. code-block:: console

    $ paver start

   Visit the SWAT-LAMP site by typing http://localhost:8000 into your browser window.

   If you are using a different IP address (e.g 1.1.1.1), then start paver using the command below.

   .. code-block:: console

    $ paver start -b 1.1.1.1:8000

   .. warning:: If the start fails because of an import error related to osgeo, then please consult the :ref:`install_gdal_devmode`.


#. To stop the server

   type hold **Ctrl c**  on your keyboard to stop the server

   now type:

   .. code-block:: console

    $ paver stop    # to stop all django, geoserver services


#. Create a superuser for your django SWAT-LAMP 

   Create a superuser so you can log on to your local SWAT-LAMP installation at http://localhost:8000

   .. code-block:: console

       $ python manage.py createsuperuser

Start working on SWAT-LAMP the next day after install
===================================================

   With every restart of your machine, you have to restart SWAT-LAMP as well. That means, you will not be able to open http://localhost:8000   directly after starting your machine new. In order to be able to use SWAT-LAMP now, you have to activate your virtualenvironment and to start the development servers. 

   .. note:: *username* is the name of your machine and personal folder!

   #. Activate virtualenv

      To activate your virtualenv you just need to type

      .. code-block:: console

       $ workon SWAT-LAMP

      .. todo:: this is not working for me!!! My steps still have to be

      or

      .. code-block:: console

       $ source /home/SWAT-LAMP/dev/.venvs/SWAT-LAMP/bin/activate

      .. note:: Be careful with the path, it might not be the same for you!

   #. Start the server

      .. warning:: Don't forget to stop the **SWAT-LAMP Production** services if enabled

            .. code-block:: console

                service apahe2 stop
                service tomcat7 stop

      .. code-block:: console

       $ cd SWAT-LAMP
       $ paver start_geoserver
       $ paver start_django

      Now you are able to access http://localhost:8000 again.

      .. note:: Remember that you have to do these steps each time you restart your machine!!

.. hint:: Now you've followed these installation instructions, SWAT-LAMP is running in development mode. This also means that you are using all the default settings of SWAT-LAMP. If you want to change them, e.g use Tomcat instead of Jetty, or Postgresql instead of sqlite3, you may follow the steps from the section **Configure Manually** in :ref:`custom_install`.

.. toctree::
   :maxdepth: 1

   install_win_devmode
   install_gdal_devmode
